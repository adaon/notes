len(str) # Длина строки
str[2] # 3 символ
str[-2] # Второй элемент с конца
str[1:3] # Второй и третий элемент
str * 8 # Умножение строки

l[1:5:2] # Извлечь с 1 по 5 элементы с шагом 2
l[1:5:-1] # Срез выбирается в обратном порядке

sorted(list) # Возвращает сортированный список
list(zip(list1, list2)) # Возвращает список кортежей, составленных из объединенных элементов
list(enumerate(list)) # Возвращает список кортежей, составленных из порядкового номера и элемента
list(filter(func, list)) # Возвращает элементы, для которых указанная функция возвращает истинное значение

sum(list)
any(list) # Истинно ли любое из значений
all(list) # Истинны ли все значения
max(list)
min(list)

# Проверка присутствия
if x in list:
	pass

# Списки ============================================
l = list("spam")
l = list(range(0, 10))

list.append(obj) # Добавление элемента в конец списка
list.extend([5, 6, 7]) # Добавление нескольких элементов в конец списка
list.insert(index, 'value') # Вставить элемент в заданную позицию
list.index('b') # Возвращает позицию элемента
list.count('b') # Возвращает количество повторений элемента
list.pop([index]) # Удаление последнего элемента (или по индексу) списка и его возврашение
list.remove(2) # Удалить элемент с заданным значением
list.sort() # Сортировка списка
list.reverse() # Развернуть

del list[5] # Удаление элемента
del list[2:5] # Удаление среза списка
list[2:5] = [] # Удаление среза списка

# Словари ===========================================
d = {} # Пустой словарь
d = dict(name='Denis') # Создание словаря
d = dict.fromkeys([1, 2, 3]) # Создание словаря по списку ключей

if 'name' in d # Проверка наличия ключа
d.keys()
d.values()
d.items() # Возвращает список кортежей ключ, значение
d.copy() # Копирование
d.get(key, default)
d.update(d2) # Слияние
d.pop(5) # Удаление
# Кортежи ===========================================
t = tuple('spam') # Создание кортежа из итерируемого объекта
t.index('m') # Индекс элемента
t.count('m') # Подсчет вхождений

# Множества =========================================
# Множества являются НЕУПОРЯДОЧЕННЫМИ коллекциями и НЕ ПОВТОРЯЮТСЯ
s = set([1, 2, 3, 4, 5]) # Создание множества
s = set('Hello')

s = frozenset([1, 2, 3]) # Создание неизменяемого множества

s = s1 | s2 # Объединение s1 и s2
s = s1 & s2 # Пересечение
s = s1 - s2 # Разность (элементы, присутствующие в s1, но отсутствующие в s2)
s = s1 ^ s2 # Симметричная разность (элементы, присутствующие в s1 или s2, но не в двух сразу)

len(s) # Количество элементов
s.copy() # Создает копию множества
s.difference(s1) # Разность множеств
s.intersection(s1) # Пересечение
s.symmetric_defference(s1) # Симметричная разность множеств
s.union(s1) # Объединение

s.add(4) # Добавление элемента к множеству
s.update([1, 2, 3]) # Добавление нескольких элементов к множеству
s.remove(5) # Удаление элемента из множества
s.clear() # Удаляет все элементы
s.difference_update(t) # Удаляет все элементы из множества s, которые присутствуют в t
s.discard(item) # Удаляет элемент item из множества. Ничего не делает при его отсутствии.
s.intersection_update(t) # Находит пересечение s и t и оставляет результат в s
s.pop() # Возвращает произвольные элемент множества и удаляет его из s
s.symmetric_difference_update(t) # Находит симметричную разность s и t и оставляет результат в s

s.isdisjoint(s1) # Возврашает True, если множества не имеют общих элементов
s.issubset(s1) # Возвращает True, если множество s является подмножеством s1
s.issuperset(s1) # Возвращает True, если множество s является надмножеством s