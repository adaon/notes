# Методы строк ================================================================================
str.find('gg'[, start][, end]) # поиск позиции подстроки или -1
str.replace('str1', 'str2'[, size]) # замена подстроки 1 но строку 2. Принимает число замен.
str.split(','[, maxsplit]) # Разбивает строку. maxsplit определяет максимальное количество разбиений
str.upper()
str.lower()
str.strip([chrs]) # Удаляет начальные и конечные пробельные символы или символы, перечисленные в chrs
str.rstrip([chrs]) # Удаляет правые пробелы
str.lstrip([chrs]) # Удаляет левые пробелы
str.endswith('!') # Проверка окончания строки
str.startswith('?') # Проверка начала строки
'-'.join(list) # Соеодинения строковых элементов list с разделителем "-"
str.encode('latin-1') # Кодирование строк юникода
str.decode('latin-1')
str.capitalize() # Преобразует первый символ в верхний регистр
str.center(width[, pad]) # Центрирует строку в поле шириной width. Аргумент pad определяет символ, которым оформляются отступы.
str.count(sub[, start][, end]) # Подсчитывает число вхождений заданной подстроки sub
str.expandtabs([tabsize]) # Замещает символы табуляции пробелами
str.index(sub[, start][, end]) # Отыскивает первое вхождение подстроки или возбуждает исключение
str.ljust(width[, fill]) # Выравнивает строку s по левому краю в поле шириной width
str.partition(sep) # Разбивает строку по подстроке-разделителю sep. Возвращает кортеж (head, sep, tail) или (s, "", "") если подстрока отсутствует
str.rfind(sub[, start][, end]) # Отыскивает последнее вхождение подстроки
str.rindex(sub[, start][, end]) # Отыскивает последнее вхождение подстроки или возбуждает исключение
str.rjust(width[, fill]) # Выравнивает строку s по правому краю в поле шириной width
str.rpartition(sep) # Разбивает строку по подстроке-разделителю sep, но поиск выполняется с конца строки
str.rsplit([sep][, maxsplit]) # Разбивает строку, начиная с конца. maxsplit определяет максимальное число разбиений
str.splitlines([keepends]) # Преобразует строку в список строк. Если аргумент keepends имеет значение 1, завершяющие символы остаются нетронутыми
str.swapcase() # Переводит символы верхнего регистра в нижний и наоборот
str.title() # Возвращает версию строки, в которой первые символы всех слов приведены к верхнему регистру
str.translate(table[, deletechars]) # Выполняет преобразование строки в соответствии с таблицей замены table, удаляет символы, перечисленные в аргументе deletechars
str.zfill(width) # Дополняет строку нулями слева до достижения ею длины width

str.isalpha() # буквенная строка или нет
str.isdigit() # числовая ли строка
str.isalnum() # Являются ли все символы в строке алфовитно-числовыми
str.islower() # Все ли в нижнем регистре
str.isupper() # Являются ли все символы в строке символами верхнего регистра
str.isspace() # Все ли пробельные символы
str.istitle() # Являются ли первые символы всех слов символами верхнего регистра


# Старый способ обработки строк предполагает использование модуля string:
import string
s = string.replace(str, 'str1', 'str2')

if 'spam' in str # Проверка на вхождение

# Управляющие последовательности:
\newline	# Игнорируется (продолжение на новой строке)
\\			# 
\'			#
\"			#
\a			# Звонок
\b			# Забой
\f			# Перевод формата
\n			#
\r			#
\t			#
\v			#
\xhh		# Символ с шестнатиричным кодом hh
\ooo		# Символ с восьмеричным кодом ooo
\0			# Символ null (не признак конца строки)
\N{id}      # Идентификатор ID базы данных юникода
\uhhh		# 16-битный символ юникода в 16-ричном представлении
\Uhhhhhhhh	# 32-битный символ юникода в 16-ричном представлении

# Форматирование строк ====================================================================
"... %s ..." % 'name'
"... %(key)s ..." % {'key':'Name', 'key2':'Name2'} # Использование форматирования из словаря

# Спецификаторы форматирования строки (%)
s	# Строка (для объекта любого другого типа будет выполнен вызов функции str(X), чтобы получить сроковое представление объекта)
r	# Строка (но использует функцию repr)
c	# Символ
d	# Десятичное целое число
i	# Целое число
u	# То же, что и d (устарел: больше не является представлением целого без знака)
o	# Восьмеричное целое число
x	# Шестнатиричное целое число
X	# x, но шестнатиричные цифры возвращаются в верхнем регистре
e	# Вещественное число в экспоненциальной форме
E	# e, но алфовитные символы возвращаются в верхнем регистре
f	# Вещественное число в десятичном представлении
F	# Вещественное число в десятичном представлении
g	# Вещественное число e или f
G	# Вещественное число E или a
%	# Символ %

"a {0} {1} parrot".format(kind, 5) # Строковый метод форматирования (2.6 - 3.0)
"Hello, {name}".format(name='Denis Ivanov') # Именованные параметры метода
# В строках метода форматирования можно также использовать [] и . для доступа к значениям последовательностей и атрибутов