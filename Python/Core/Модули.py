dir(module) # Получение списка доступных имен внутри модуля
exec(open("module.py").read()) # Выполнение модуля. Функция exec выполняет код, содержащийся в параметре

# Переменная окружения PYTHONPATH определяет каталоги для поиска модулей
1. Домашний каталог программы
2. Содержимое PYTHONPATH
3. Каталоги стандартной библиотеки
4. Содержимое любых файлов с расширением .pth (добавляет к пути поиска строки, расположенные в этом файле)

# Все пути поиска содержатся в списке sys.path

# ИНСТРУКЦИИ IMPORT И FROM — ОПЕРАЦИИ ПРИСВАИВАНИЯ
# ПРИ ИМПОРТИРОВАНИИ МОДУЛЬ ЗАГРУЖАЕТСЯ ТОЛЬКО 1 РАЗ

# Доступ к пространствам имен модулей можно получить через атрибут __dict__ или dir(M)

# Для повторной загрузки необходимо использовать функцию reload (imp.reload в Python 3.0), которой передается существующий объект модуля

# В КАЖДОМ ИМПОРТИРУЕМОМ ПАКЕТЕ ДОЛЖЕН СОДЕРЖАТЬСЯ ФАЙЛ __init__.py, КОТОРЫЙ ВЫПОЛНЯЕТСЯ ДЛЯ ИНИЦИАЛИЗАЦИИ ПАКЕТА

from .dir1.dir2 import module # Импортирование ТОЛЬКО относительно текущего пакета. ТОЛЬКО В ИНСТРУКЦИИ FROM

def _x(self): pass # Объявление атрибута модуля с ведущим _ делает его невидимым для инструкции FROM *
__all__ = ['name', 'age'] # Инструкция from * будет копировать только атрибуты модуля, определенные в переменной

from __future__ import module # Включение новой функциональной особенности

# Присваивание синонимов импортируемым модулям
import longmodulename as module
from mod import longmodulename as module

sys.modules['M'] # Словарь содержит все загруженные модули
getattr(module, 'attr') # Доступ к аттрибутам модуля с помощью встроенной функции

module = __import__("module_name") # Импорт модуля с помощью строки

# Аттрибуты модуля:
m.__name__ # Если файл запускается как главный, содержит "__main__", если импортируется — содержит имя модуля
m.__dict__ # Словарь, содержащий атрибуты модуля
m.__doc__ # Строка документирования модуля
m.__file__ # Имя файла, откуда был загружен модуль
m.__path__ # Полное имя пакета. Определен, только когда объект модуля ссылается на пакет