__debug__ # Встроенная переменная содержит Truem, когда интерпретатор работает не в оптимизированном режиме

# Обработка исключений
try:
	...
except ExceptionType as e: # В e записывается экземпляр исключения
	...
except: # Запускается для любого другого исключения
	...
else: # Запускается, если исключений не возникло
	...
finally: # Блок, который выполняется ВСЕГДА
	...

raise ExceptionType(arg) # Возбуждение исключения. Должен передаваться экземпляр исключения. Если передается класс, вызывается конструктор по
# умолчанию для создания экземпляра. Сохраняет аргументы конструктора в списке e.args

assert условие, данные # Если условие ложно, создает исключение AssertionError и передает данные в качестве параметра конструктора

sys.exc_info() # Функция возвращает кортеж с информацией об исключении

class MyException(Exception):
	def __init__(self, arg1, arg2):
		self.args = (arg1, arg2) # При переопределение конструктора исключений НЕОБХОДИМО присвоить кортеж с аргументами аттрибуту self.args

# Типы исключений =================================================================
BaseException							# Базовый класс всех исключений
	GeneratorExit						# Возбуждается методом .close() генераторов
	KeyboardInterrupt					# Возбуждается нажатием клавишей прерывания
	SystemExit							# Завершение программы
	Exception							# Базовый класс для всех исключений, не связанных с завершением программы
		StopIteration					# Возбуждается для прекращения итераций
		StandardError					# Базовый класс для всех встроенных исключений
			ArithmeticError				# Базовый класс исключений, возбуждаемых арифметическими операциями
				FloatingPointError		# Ошибка операции с плавающей точкой
				ZeroDivisionError		# Деление на ноль
			AssertionError				# Возбуждается инструкциями assert
			AttributeError				# Возбуждается при обращении к несуществующему аттрибуту
			EnvironmentError			# Ошибка, обусловленная внещними причинами
				IOError					# Ошибка ввода-вывода при работе с файлами
				OSError					# Ошибка операционной системы
			EOFError					# Возбуждается по достижении конца файла
			ImportError					# Ошибка в инструкции import
			LookupError					# Ошибка обращения по индексу или ключу
				IndexError				# Ошибка обращения по индексу за пределами последовательности
				KeyError				# Ошибка обращения к несуществующему ключу словаря
			MemoryError					# Нехватка памяти
			NameError					# Не удалось отыскать локальное или глобальное имя
			UnboundLocalError			# Ошибка обращения к локальной переменной, которой еще не было присвоено значения
			ReferenceError				# Ошибка обращения к объекту, который уже был уничтожен
			RuntimeError				# Универсальное исключение
			NotImplementedError			# Обращение к нереализованному методу или функции
			SyntaxError					# Синтаксическая ошибка
				IndentationError		# Ошибка оформления отступов
					TabError			# Непоследовательное использование символа табуляции (при запуске интерпретатора с ключом -tt)
			SystemError					# Нефатальная системная ошибка в интерпретаторе
			TypeError					# Попытка выполнить операцию над аргументом недопустимого типа
			ValueError					# Недопустимый тип
				UnicodeError			# Ошибка при работе с символами Юникода
				UnicodeDecodeError		# Ошибка декодирования юникода
				UnicodeEncodeError		# Ошибка кодирования юникода
				UnicodeTranslateError	# Ошибка трансляции юникода
				
# Экземпляры исключений:
e.args # Кортеж аргументов, полученных конструктором при возбуждении исключения.
e.message # Строка с текстом сообщения, которое выводится при отображении информации об исключении (ТОЛЬКО В PYTHON 2)
e.__cause__ # Предыдущее исключение в явной цепочке исключений (ТОЛЬКО PYTHON 3)
e.__context__ # Предыдущее исключение в неявной цепочке исключений (ТОЛЬКО PYTHON 3)
e.__traceback__ # Объект с трассировочной информацией (ТОЛЬКО PYTHON 3)

# Предупреждения: =================================
import warnings
warnings.warn("Message", WarningType)

# Types:
Warning # Базовый класс ждя всех предупреждений. Является производным от класса Exception
	UserWarning # Универсальное предупреждение, определяемое пользователем
	DeprecationWarning # Предупреждение на случай использования нерекомендуемых возможностей
	SyntaxWarning # Предупреждение на случай использования нерекомендуемого синтаксиса
	RuntimeWarning # Предупреждение на случай использования особенностей, которые могут привести к проблемам во время выполнения
	FutureWarning # Предупреждение о том, что поведение используемой возможности изменится в будушем