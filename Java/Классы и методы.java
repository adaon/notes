public static strictfp void main(String args[]) {} // Все вычисления в данном методе будут одинаковы для всех машин

public void finalize() {} // Данный метод вызывается при уничтожении объекта

// Возможна перегрузка методов
// Возможна рекурсия

/* Передача аргументов */

// Когда методу передается простой тип, он передается по значению. Если передается объект, он передается по ссылке.

/* Управление доступом */

public // Возможен доступ из любой части программы
private // Доступен только для членов этого же класса
protected // Доступен для членов этого же класса и всех подклассов

static // Статические классы
final // Предохраняет содержимое переменной от изменения (по соглашению имена таких переменных набираются в ВЕРХНЕМ регистре)

// Вложенные классы (нестатические имеют доступ ко всем членам объемлющего класса)
class A {
    // ...
    class B {
        // ...
    }
    // ...
}

/* Наследование */

class A extends B {} // Наследование

A myA = new B(); // Переменная суперкласс может ссылаться на объект подкласса

// Запрещение переопределения подклассами
final void myMethod() {}

// Запрещение наследования класса
final class MyClass {}

super(arg1, arg2); // Вызов конструктора суперкласса
super.member; // Обращение к члену суперкласса

/* Абстрактные классы */

// Абстрактный класс (каждый класс, который содержит абстрактные методы, должен быть объявлен абстрактным)
abstract class MyClass {
    // Абстрактный метод
    abstract void myMethod();
}

/* Класс Object */

// Все классы наследуют класс Object

obj.clone(); // Создает новый объект, который является таким же, как имитируемый объект
obj.equals(obj2); // Определяет, является ли один объект равным другому
obj.finalize(); // Вызывается прежде, чем неиспользованный объект будет переработан (сборщиком мусора)
obj.getClass(); // Получает класс объекта во время выполнения
obj.hashCode(); // Возвращает хэш-код, связанный с вызовом объекта
obj.notify(); // Возобновляет выполнение потока, ожидающего на объекте вызова
obj.notifyAU(); // Возобновляет выполнение всех потоков, ожидающих на объекте вызова
obj.toString(); // Возвращает строку, которая описывает объект
// Ждет выполнения на другом потоке
obj.wait();
obj.wait(milliseconds);
obj.wait(millisecinds, nanoseconds);