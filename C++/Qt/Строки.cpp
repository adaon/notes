QString str = "Hello, world!";
str.isEmpty(); // Пустая ли строка
str.length(); // Длина строки
str.isNull();
str.replace("from", "to"); // Замена
str.toLower();
str.toUpper();

QString str = QString::number(456.444); // Преобразование числа в строку.
QTextStream(&str) << 456.444; // Другой вариант.
str.toDouble();
str.toInt();
QStringList list = str.split("splitter");
str = list.join(" "); // Объединение списка строк в одну

str.append(str2); // Добавление строки

/* Регулярные выражения */
.       Любой символ
$       Должен быть конец строи
[]      Ищет символ из заданного набора символов
-       Определяет диапазон символов []
^       Ищет любой символ, не вошедший в набор
*       Символ должен встретиться в строке определенное число раз
+       Символ должен встретиться в строке минимум 1 раз
?       Символ должен встретиться в строке 1 раз или не встретиться вообще
{n}     Символ должен встретиться в строке указанное число раз
{n,}    Допускается минимум n совпадений
{,n}    Допускается до n совпадений
{n, m}  Допускается от n до m совпадений
|       Ищет один из двух символов
/b      Определяет границы слова
/B      Противоположная граница слова
()      Ищет и сохраняет в памяти группу найденных символов
\d      Любое число
\D      Все, кроме числа
\s      Любой тип пробелов
\S      Все, кроме пробелов
\w      Любая буква, цифра или знак подчеркивания
\W      Все, кроме букв
\A      Начало строки
\b      Целое слово
\B      Не слово
\Z      Конец строки (совпадает с символом конца строки или перед символом перевода каретки)
\z      Конец строки (совпадает только с концом строки)

// Проверка строки на содержание ip адреса
QRegExp reg("[0-9]{,3}\\.[0-9]{,3}\\.[0-9]{,3}\\.[0-9]{,3}")
QString str("this is an ip-address 123.222.63.1 lets check it");
qDebug() << (str.contains(reg) > 0); // true