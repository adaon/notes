// Общие методы управления последовательными контейнерами;
at(); // Возвращает указанный элемент
back(), last(); // Возвращает ссылку на последний элемент.
contains(); // Подсчитывает количество двойников элемента.
erase(); // Удаляет элемент, расположеннный на позиции итератора, передаваемого в метод.
front(), first(); // Возвращает ссылку на первый элемент контейнера.
indexOf(); // Возвращает позицию первого совпадения, найденного в контейнере элемента, в соответствии с переданным в метод значением.
lastIndexOf(); // Возвращает позицию последнего совпадения найденного в контейнере элемента, в соответствии с переданным в метод значением.
mid(); // Возвращает контейнер, содержащий копии элементов, задаваемых позицией и количеством.
pop_back(); // Удаляет последний элемент контейнера.
pop_front(); // Удаляет первый элемент контейнера.
push_back(), append(); // Добавляют один элемент в конец контейнера.
push_front(), prepend(); // Добавляют один элемент в начало контейнера.
replace(); // Удаляет элемент, находящийся ана заданной позиции и имеющий определенное значение.

// QVector;
QVector<int> v;
v.data(); // Возвращает указатель на данные вектора
v.fill();
v.reserve(); // Резервирует память для количества элементов в соответствии с переданным значением.
v.resize(); // Устанавливает размер
v.toList(); // Возвращает объект QList
v.toStdVector();

// QByteArray;
QByteArray arr(3);
arr[0] = arr[1] = 0xFF;

// QBitArray;
QBitArray bits(3);
bits]0[ = bits[1] = true;

// QList;
move(); // Перемещает элемент
removeFirst();
removeLast();
swap(); // Меняет местами два элемента
takeAt(); // Возвращает элемент на указанной позиции и удаляет его.
takeFirst();
takeLast();
toSet(); // QSet
toStdList();
toVector(); // QVector

// QStack;
QStack<QString> stk;
stk.push("Me"); // Помещение элемента наверх стека
stk.pop(); // Снятие элемента сверху стека.

// QQueue;
QQueue<QString> q;
q.enqueue("Me"); // Помещение элемента в конец очереди.
q.dequeue(); // Снятие элемента из конца очереди.




// Общие методы управления ассоциативными контейнерами:
contains(); // Возврщаеат true, если контейнер содержит элемент с заданным ключом.
insert("key", "value");
erase(); // Удаляет элемент из контейнера по итератору.
find(); // Поиск элемента по значению. Возвращает итератор, в случае неудачи - end;
insertMulti(); // Вставляет в контейнер новый элемент.
key(); // Возвращает первый ключ в соответствии с переданным значением.
keys(); // Возвращает список всех ключей.
take(); // Удаляет элемент из контейнера в соответствии с переданным ключом и возвращает его значение.
unite(); // Добавляет элементы одного контейнера в другой.
value();
values(); // Возвращает список всех значений.

// QMap;
m.lowerBound(); // Возвращает итератор, указывающий на первый элемент с заданным ключом.
m.toStdMap();
upperBound(); // Возвращает итератор, указывающий на последний элемент с заданным ключом.

// QHash;
h.capacity();
h.reserve();
h.squeeze(); // Уменьшает объем внутренней хэш-таблицы для уменьшения размера используемого объема памяти.

// QSet;
QSet<QString> set1;
set1 << "v1" << "v2" << "v3";
set1.unite(set2); // Объединение
set1.intersect(set2); // Пересечение
set1.substract(set2); // Вычитание
set1.toList();


























