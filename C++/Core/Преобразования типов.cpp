#include <cstdlib>
atoi(str); // Возвращает целое число из строки
atol(str); // Возвращает длинное целое число из строки
atof(str); // Возврашает число double из строки

#include <typeinfo>;
typeid(object).name(); // Возвращает имя типа переменной. В случае неудачи возвращает исключение bad_typeid
if(x == typeid(int)) {/*..*/} // Получение объекта typeid для базового типа 

dynamic_cast<type>(*&object); // Возвращает преобразование указателя или ссылки одного типа в указатель или ссылку другого
// Возвращает нулевой указатель при операции с указателями.
// При операции с ссылками генерирует исключение bad_cast

const_cast<type>(object); // Возвращает преобразование указателя или ссылки одного типа в указатель или ссылку другого,
// отменяя действие модификаторов volatile, const

statiс_cast<type>(object); // Статическое (неполиморфное преобразование). Во время выполнения никаких проверое не производится

reinterpret_cast<type>(object); // Приведение несовместимых типов (например, указателя в число)

class MyClass {
	int x;
	int y;
public:
	operator int() { // Функция преобразования класса
		return x * y;
	}
};

// Создание функции преобразования. Должна быть членом класса, который необходимо преобразовать
Person::operator string() {
	return result;
}