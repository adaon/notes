// Любой объект, содержащийся в веторе, должен иметь конструктор по умолчанию, а также операторы "<" и "=="
// Конструкторы класса vector:
explicit vector();
explicit vector(size, [value]); // Создает вектор из size элементов, заполненных определенными значениями
vector(vect); // Создает вектор, содержащий элементы вектора vect
vector<InIter>(start, end); // Создает вектор, состоящий из элементов, лежащий в диапазоне, определенном итераторами start и end

vector v = vector();
v.size();
v.begin(); // Возвращает итератор начала вектора
v.end(); // Возвращает итератор конца вектора
v.push_back(value); // Записывает значение в конец вектора
v.reference_back(); // Возвращает ссылку на последний элемент вектора
v.clear(); // Удаляет из вектора все элементы
v.empty(); // Пустой ли вектор
v.erase(iterator); // Удаляет элемент, на который ссылается итератор. Возвращает итератор, следующий за удаленным
v.erase(start, end); // Удалет элементы из диапазона
v.front(); // Возвращает ссылку на первый элемент
v.insert(iter, value); // Вставляет элемент value перед элементом, на который ссылается итератор
v.insert(iter, num, value); // Вставляет элемент value num раз
v.insert(iter, start, end); // Вставляет перед элементом iter последовательность элементов
v.pop_back(); // Удаляет последний элемент вектора

vector<int>::iterator p = v.begin(); // Объявление итератора вектора
int x = *p; // Доступ к текущему элементу через итератор
p = v.begin();
p+=2; // Установка итератора на 3 элемент
p++; // Инкрементирование итератора

// Конструкторы класса list
list();
list(num, value);
list(list_obj);
list(start, end);

l.merge(list); // Внедряет список list в заданный список
l.merge(list, Comp comfn); // Принимает в качестве дополнительного аргумента функцию сравнения
l.pop_front(); // Удаляет первый элемент списка
l.push_front(value); // Помещает элемент в начало списка
l.remove(val); // Удалет элементы, значение которых равно val
l.reverse(); // Меняет порядок на противоположный
l.sort(); // Упорядочивает список
l.sort(Comp comfn); // Принимает функцию сравнения
l.splice(iter, list); // Вставляет в позицию iter элементы объекта list
l.splice(iter, list, iter2); // Элемент iter2 удаляется из списка list и вставляется в позицию iter
l.splice(iter, list, start, end); // Вставляет в позицию iter диапазон списка list

// Конструкторы класса map
map();
map(map);
map(start, end);

m.count(); // Возвращает текущее количество дубликатов элемента со значением k  в ассоциативном массиве
m.find(key); // Возвращает итератор, установленный на указанный ключ. Если ключ не найден, возвращает итератор на конец массива.