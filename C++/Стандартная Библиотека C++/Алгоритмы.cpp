#include <algorithm>;
count(start, end, value); // Возвращает количество элементов интевала, равных value
count_id(start, end, func); // Третьим параметром передается функция, принимающая 1 значение и возвращающая true|false

remove_copy(start, end, iter_to, value); // Удаляет из промежутка все элементы со значением value и помещает из в позици. итератора
replace_copy(start, end, iter_to, from, to); // Заменяет в промежутке элементы from на элементы to, копируя последовательность замененных
// элементов в позицию итератора iter_to

reverse(start, end); // Изменяет порядок следования элементов промежутка на противоположный

transform(start, end, result, func); // Преобразовывает каждый элемент последовательности с помощью унарной функции func и помещает полученный
// промежуток в позицию итератора result;
transform(start1, end1, start2, result, func); // Функция func является бинарной и принимает параметр из последовательности start1-end1 и
// последовательности start2-...