// Классы исключений <stdexcept>:
exception; // <exception> Базовый класс всех исключений 

bad_alloc; // <new> Возвникает при ошибке использования оператора new
bad_cast; // <typeinfo> Генерируется оператором dynamic_cast при ошибке преобразования типа
bad_typeid; // <typeinfo> Если аргументом typeid является 0 или null-указатель
bad_exception; // <exception>  Непредвиденное исключение

logic_error; // Базовый класс для исключений стандартной библиотеки
invalid_argument; // Недопустимые аргументы
length_error; // Нарушение ограничения на максимальный размер (например, слишком длинная строка)
out_of_range; // Выход за рамки допустимых значений
domain_error; // Выход за пределы области допустимых значений
ios_base::failure; // <ios> Изменение состояния потока вследствие ошибка или достижения конца файла

runtime_error; // Базовый класс для исключений внешних ошибок
range_error; // Ошибка выхода за пределы допустимого интервала во внутренних вычислениях
overflow_error; // Математическое переполнение
underflow_error; // Математическая потеря значимости


exception.what(); // Возвращает строку с сообщением

throw logic_error(message); // Генерация стандартных исключений

try {/*...*/}
catch(...) { throw; } // Перезапуск исключения

void terminator() {/*...*/}
void (*old_terminate)() = set_terminate(terminator); // Установка функции терминирования программы (вызывается при необработанном исключении)

void my_inexpected() {/*...*/}
void (*old_unexpected)() = set_unexpected(my_unexpected); // Установка функции обработки неожиданного исключения

// Блок try уровня функций
void func() try {
	/*...*/
}
catch(...) { }

#define NDEBUG // Определение данной константы отключает утверждения
#include <cassert>;
assert(x > 5); // Утверждение. При ложности условия выводит трассировку в поток ошибок