!1 Основы

!2 Создание простого в сопровождении программного кода

Простой в сопровождении программный код предполагает соответствие следущим критериям:

{:
* Удобочитаемость.
* Непротиворечивость.
* Предсказуемость.
* Оформление, как если бы он был написан одним человеком.
* Наличие документации.
:}

!3 Шаблон единственной инструкции var

{-
function func() {
    var x1 = 5,
        x2 = 6,
        name = '',
        person: {}
}
-}

!3 Циклы for

{-
var i,
    max;

for(i = 0, max = arr.length; i < max; i += 1) {
    
}
-}

{-
var i;

for(i = arr.length; i--;) {
    // Выполнить какие-либо операции над arr[i].
}
-}

{-
var i = arr.length;
while(i--) {
    // Выполнить какие-либо операции над arr[i].
}
-}

!3 Циклы for-in

Данные циклы должны использоваться только для тех объектов которые не являются массивами. Данный обход также называется !!перечислением.

Важно заключать тело цикла в проверку hasOwnProperty().

{-
var prop;
for (prop in object) {
    if(object.hasOwnProperty(prop)) {
        // Тело цикла.
    }
}
-}

Данный шаблон позволяет предотвратить ошибки в случае, если объект переопределяет метод hasOwnProperty():

{-
var prop;
for (prop in object) {
    if(Object.prototype.hasOwnProperty.call(object, prop)) {
        // Тело цикла.
    }
}
-}

!3 Расширение встроенных прототипов

Лучше отказаться от расширения встроенных прототипов. Исключение из правил можно сделать только при соблюдении всех следующих условий:

{;
* Если ожидается, что данная функциональность будет предусмотрена в будущих версиях ECMAScript или реализована в JavaScript в виде встроенных методов.
* Вы проверили, что ваше свойство или метод не реализовано где-либо в другом месте и не является частью реализации JavaScript в одном из браузеров, поддерживаемых вами.
* Вы описали это расширение в документации и сообщили об изменениях всем участникам проекта.
;}

{-
if(typeof Object.prototype.myMethod !== 'function') {
    Object.prototype.myMethod = function() {
        // Релизация.
    };
}
-}

!3 Шаблон switch

Каждая инструкция case выравнивается по инструкции switch. Программный код внутри инструкции case оформляется с дополнительным отступом. Каждая инструкция case завершается явно с помощью инструкции break. Инструкция switch завершается инструкцией default.

{-
switch(value) {
case 0:
    result = '0';
    break;
case 2:
    result = '1';
    break;
default:
    result = 'unknown';
}
-}

!3 Избегайте неявного приведения типов

Всегда следует использовать оператор !!=== вместо ==.

!3 Не используйте eval()

!3 Преобразование строки в число с помощью parseInt()

Чтобы избежать несогласованности и получение неожиданных результатов, всегда указывайте параметр, определяющий систему счисления:

{-
parseInt(str, 10);
-}

Можно использовать и альтернативные варианты преобразования строки в число:

{-
+'08';
Number('08');
-}

!2 Соглашения по оформлениею программного кода

!3 Фигурные скобки

Необходмо всегда использовать фигурные скобки, даже когда они являются необязательными.

Необходимо всегда помещать открывающую скобку в конец строки с предыдущей конструкцией, так как из-за автоматической подстановки точек с запятой могут возникать проблемы.

{-
function func() {
    return {
        name: 'Batman'
    };
}
-}

Также необходимо всегда ставить точки с запятой, даже там, где они подразумеваются.

!3 Пробелы

Желательно вставлять дополнительные пробелы в следующих местах:

{:
* После точек с запятой, отделяющих части инструкции for.
* При инициализации нескольких переменных в цикле for.
* После запятых, отделяющих элементы массива.
* После запятых, отделяющих описания свойств объекта, и после двоеточий, отделяющих имена свойств от их значений.
* После запятых, отделяющих аргументы функций.
* Перед фигурными скобками в объявлениях функций.
* После ключевого слова function в определениях анонимных функций.
:}