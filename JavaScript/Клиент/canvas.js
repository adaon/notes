var canvas = document.getElementById('mycanv');

// Получение 2d-контекста
var c = canvas.getContext('2d');

/* Рисование линий и заливка многоугольников */

// Начать новый контур.
c.beginPath();
// Новый фрагмент контура с начальной точкой
c.moveTo(100, 100);
// Добавить линию
c.lineTo(200, 200);
// Залить получившуются область
c.fill();
// Нарисовать линию
c.stroke();
// Закрывает путь
c.closePath();

// Графические атрибуты объекта canvas
fillStyle // Цвет, градиент или шаблон, используемый для заливки
font // Определение шрифта в формате CSS для команд рисования текста
globalAlpha // Уровень прозрачности, назначаемый для всех пикселов при рисовании
globalCompositeOperation // Способ объединения новых пикселов с существующими
lineCap // Форма концов линий
lineJoin // Форма вершин
lineWidth // Толщина рисуемых линий
miterLimit // Максимальная длина острых вершин
textAlign // Выравнивание текста по горизонтали
textBaseline // Выравнивание текста по вертикали
shadowBlur // Четкость теней
shadowColor // Цвет теней
shadowOffsetX // Горизонтальное смещение теней
shadowOffsetY // Вертикальное смещение теней
strokeStyle // Цвет, градиент или шаблон, используемый для рисования линий

/* Размеры и система координат холста */

// Размеры холста могут быть дробными числами, в таком случае для эффекта частичного заполнения пикселей canvas будет использовать сглаживание.

// Изменение значения свойства width или height объекта Canvas (даже присваивание текущих значений) вызывает очистку холста, стирание текущего контура и переустановку всех графических атрибутов.

/* Преобразование системы координат */

c.translate(5, 5); // Смещает начало системы координат влево, вправо, вверх или вниз
c.rotate(Math.PI/6); // Выполняет вращение осей координат по часовой стрелке на указанный угол в радианах. Чтобы преобразовать градусы в радианы, необходимо разделить значение в градусах на 180 и умножить на Math.PI.
c.scale(1.5, 0.5); // Растягивает или сжимает расстояния по оси X или Y. Если передать отрицательное значение, система координат будет отражена зеркально.

/* Рисование и заливка кривых */

// Рисует прямую линию к началу дуги и дугу
c.arc(
	300, // X центра окружности
	300, // Y центра окружности
	100, // Радиус окружности
	90/180*Math.PI, // Угол начала дуги
	180/180*Math.PI, // Угол конца дуги
	false // По часовой стрелке (true - против)
);
// Рисует прямую линию к началу дуги и дугу
c.arcTo(P1, P2, radius); // Принимает две точки касательной и радиус дуги
// Рисует кривую Безье по двум контрольным точкам
c.bezierCurveTo();
// Рисует квадратичные кривые Безье, имеет одну контрольную точку.
c.quedraticCurveTo();

/* Прямоугольники */

// Данные методы не оказывают влияния ни на текущий контур, ни на текущую точку внутри этого контура.
c.fillRect(x1, y1, x2, y2); // Выполняет заливку внутренней области прямоугольника в соответствии со значением атрибута fillStyle.
c.strokeRect(x1, y1, x2, y2); // Рисует контур прямоугольника, используя текущее значение атрибута strokeStyle и других атрибутов линий.
c.clearRect(x1, y1, x2, y2); // Заполняет прямоугольник прозрачными черными пикселами.
// Добавляет указанный прямоугольник в виде отдельного фрагмента контура. Сам по себе он не производит ни заливку, ни рисование контура.
c.rect(x1, y1, x2, y2);

/* Цвет, прозрачность, градиенты и шаблоны */

// По умолчанию - #000000
c.strokeStyle = 'blue'; // Цвет линии
c.fillStyle = '#aaa'; // Цвет заливки