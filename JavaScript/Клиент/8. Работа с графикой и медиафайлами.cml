!1 Работа с графикой и медиафайлами

!2 Работа с готовыми изображениями

{!Пропущено:663-664!}

!2 Работа с аудио- и видеопотоками

{!Пропущено:665-671!}

!2 SVG - масштабируемая векторная графика

{!Пропущено:672-679!}

!2 Создание графики с помощью элемента <canvas>
{-
var canvas = document.getElementById('mycanv');

// Получение 2d-контекста
var c = canvas.getContext('2d');
-}

!3 Рисование линий и заливка многоугольников

{-
// Начать новый контур.
c.beginPath();
// Новый фрагмент контура с начальной точкой
c.moveTo(100, 100);
// Добавить линию
c.lineTo(200, 200);
// Залить получившуются область
c.fill();
// Нарисовать линию
c.stroke();
// Закрывает путь
c.closePath();

// Графические атрибуты объекта canvas
fillStyle // Цвет, градиент или шаблон, используемый для заливки
font // Определение шрифта в формате CSS для команд рисования текста
globalAlpha // Уровень прозрачности, назначаемый для всех пикселов при рисовании
globalCompositeOperation // Способ объединения новых пикселов с существующими
lineCap // Форма концов линий
lineJoin // Форма вершин
lineWidth // Толщина рисуемых линий
miterLimit // Максимальная длина острых вершин
textAlign // Выравнивание текста по горизонтали
textBaseline // Выравнивание текста по вертикали
shadowBlur // Четкость теней
shadowColor // Цвет теней
shadowOffsetX // Горизонтальное смещение теней
shadowOffsetY // Вертикальное смещение теней
strokeStyle // Цвет, градиент или шаблон, используемый для рисования линий
-}

!3 Размеры и система координат холста

{-
// Размеры холста могут быть дробными числами, в таком случае для эффекта частичного заполнения пикселей canvas будет использовать сглаживание.

// Изменение значения свойства width или height объекта Canvas (даже присваивание текущих значений) вызывает очистку холста, стирание текущего контура и переустановку всех графических атрибутов.
-}

!3 Преобразование системы координат
{-

c.translate(5, 5); // Смещает начало системы координат влево, вправо, вверх или вниз
c.rotate(Math.PI/6); // Выполняет вращение осей координат по часовой стрелке на указанный угол в радианах. Чтобы преобразовать градусы в радианы, необходимо разделить значение в градусах на 180 и умножить на Math.PI.
c.scale(1.5, 0.5); // Растягивает или сжимает расстояния по оси X или Y. Если передать отрицательное значение, система координат будет отражена зеркально.
-}

!3 Рисование и заливка кривых

{-
// Рисует прямую линию к началу дуги и дугу
c.arc(
	300, // X центра окружности
	300, // Y центра окружности
	100, // Радиус окружности
	90/180*Math.PI, // Угол начала дуги
	180/180*Math.PI, // Угол конца дуги
	false // По часовой стрелке (true - против)
);
// Рисует прямую линию к началу дуги и дугу
c.arcTo(P1, P2, radius); // Принимает две точки касательной и радиус дуги
// Рисует кривую Безье по двум контрольным точкам
c.bezierCurveTo();
// Рисует квадратичные кривые Безье, имеет одну контрольную точку.
c.quedraticCurveTo();
-}

!3 Прямоугольники

{-
// Данные методы не оказывают влияния ни на текущий контур, ни на текущую точку внутри этого контура.
c.fillRect(x, y, width, height); // Выполняет заливку внутренней области прямоугольника в соответствии со значением атрибута fillStyle.
c.strokeRect(x, y, width, height); // Рисует контур прямоугольника, используя текущее значение атрибута strokeStyle и других атрибутов линий.
c.clearRect(x, y, width, height); // Заполняет прямоугольник прозрачными черными пикселами.
c.rect(x1, y1, x2, y2); // Добавляет указанный прямоугольник в виде отдельного фрагмента контура. Сам по себе он не производит ни заливку, ни рисование контура.
-}

!3 Цвет, прозрачность, градиенты и шаблоны

{-
// По умолчанию - #000000
c.strokeStyle = 'blue'; // Цвет линии
c.fillStyle = '#aaa'; // Цвет заливки
-}

Данным свойствам также можно присваивать объекты CanvasPattern и CanvasGradient, чтобы рисование или заливка выполнялась с использованием повторяющегося изображения или линейного или радиального градиента.

Варианты цветов:

{-
#f44
#44ff44
rgb(60, 60, 255)
rgb(100%, 25%, 100%)
rgba(100%, 25%, 100%, 0.5)
rgba(0, 0, 0, 0)
transparent
hsl(60, 100%, 50%)
hsla(60, 100%, 50%, 0.5)
-}

{-
canvas.globalAlpha = 0.5; // Установка прозрачности для всех рисуемых пикселей.
-}

Заливка узором:

{-
c.fillStyle = c.createPattern(img'), 'repeat'); // Первый аргумент должен быть элементом документа <img>, <canvas> или <video>. Во втором аргументе может быть 'repeat, repeat-x, repeat-y' или 'no-repeat'.
c.fillRect(50, 50, 150, 150);
-}

Заливка градиентом:

{-
// Линейный градиент:
var gr = c.createLinearGradient(x1, y1, x2, y2); // Линия градиента.
gr.addColorStop(0.0, '#88f');
gr.addColorStop(1.0, '#fff');
c.fillStyle = gr;

// Радиальный градиент:
var gr = c.createRadialGradient(x1, y1, r1, x2, y2, r2); // Центры и радиусы окружностей
gr.addColorStop(0.0, 'red');
gr.addColorStop(1.0, 'orange');
-}

!3 Атрибуты рисования линий

Свойство lineCap определяет, как будут выглядеть концы незамкнутых фрагментов контуров.

{!
butt (по умолчанию) -- Линии завершаются непосредственно в конечной точке.
square -- Линия будет продолжена за конечную точку на половину толщины и будет иметь квадратный конец.
round -- Линия будет продолжена за конечную точку на половину толщины и будет иметь загругленный конец (с радиусом закругления в половину толщины линии).
!}

Свойство lineJoin определяет внешний вид верщин, соединяющих фрагменты контура.

{!
miter (по умолчанию) -- Внешние края линий двух фрагментов контура будут продолжены, пока они не встретятся.
round -- Вершины получают закругленную форму.
bevel -- Вершины обрезаются прямыми линиями.
!}

Свойство miterLimit используется только когда свойство lineJoin имеет значение miter. Когда две линии соединяются под острым углом, сопряжение между ними может оказаться довольно протяженным. Свойство miterLimit определяет верхнюю границу протяженности сопряжений.

!3 Текст

{-
c.fillText(text, x, y[, max_width]); // Рисует текст, используя цвет, определяемый свойством fillStyle.
c.strokeText(text, x, y[, max_width]); // Контур.

var width = c.measureText(text).width; // Получение ширины заданного текста.
-}

Если значение max_width превышается, при заданном значении свойства font будет выполнено его масштабирование или будет использован более узкий или более мелкий шрифт.

Свойства контекста для шрифта:

{!
font -- Шрифт, который будет использоваться для рисования текста. Значением этого свойства должна быть строка с соблюдением синтаксиса CSS-атрибута font.
textAlign -- Определяет способ выравнивания текста по горизонтали с учетом координаты X, переданной методу fillText() или strokeText(). Может быть start, left, center, right, end.
textBaseline -- Определяет способ выравнивания текста по вертикали с учетом координаты Y. Может быть top, hangind, middle, alphabetic, ideographic, bottom.
!}

!3 Отсечение

{-
c.clip(); // Превратить текущий контур или заливку в область отсечения. После этого рисование будет выплняться только в ее пределах.
-}

!3 Тени

Объект CanvasRenderingContext2d имеет 4 свойства графическиих атрибутов, управляющих рисованием теней. Если присвоить этим свойствам соответствующие значения, любые линии, области, текст или изображения будут отбрасывать тени.

{!
shadowColor -- Определяет цвет тени. Значением по умолчанию является полностью прозрачный черный цвет. Этому свойству допускается присваивать только строковые значения цвета: для рисования теней не могут использоваться шаблоны и градиенты.
shadowOffsetX, shadowOffsetY -- Определяют смещение тени по осям X и Y. По умолчанию - 0. Значения данных свойств всегда определяются в системе координат по умолчанию и не подвержены действию методов rotate() и scale().
shadowBlur -- Определяет, насколько размытым будет выглядеть край тени. По умолчанию - 0. Значение этого свойства используется как параметр размытия по Гауссу и не является размером или длиной в пикселах.
!}

!3 Изображения

{-
c.drawImage(img, x, y); // Отрисовывает переданный объект изображения, canvas или видео в указанной точке. Координаты будут интерпретироваться как координаты в текущей системе координат, поэтому при необходимости изображение будет масштабировано или повернуто.
c.drawImage(img, x, y, width, height); // Выполнит масштабирование изображения, чтобы уместить его в отведенную область, даже если к исходной системе координат не применялось масштабирование.
c.drawImage(img, imgX, imgY, imgWidth, imgHeight, x, y, width, height); // Копирует указанную область изображения в указанную область холста.

canvas.toDataURL(); // Возвращает содержимое холста как PNG-изображение, закодированное в виде строки в формате URL data:.
-}

!3 Композиция

Значения свойства globalCompositeOperation:

{!
source-over -- 
sourte-atop -- 
source-in -- 
source-out -- 
destination-over -- 
destination-atop -- 
destination-in -- 
destination-out -- 
copy -- 
lighter -- 
xor -- 
!}

!3 Манипулирование пикселами

{-
c.getImageData(x, y, width, height); // Возвращает объект ImageData, представляющий массив пикселов из прямоугольной области холста.
c.createImageData(); // Создает пустой объект ImageData.
c.putImageData(data, x, y); // Вставить данные в холст.
-}

!3 Определение попадания

{-
c.isPointInPath(x, y); // Находится ли указанная точка внутри (или на границе) текущего контура.
-}