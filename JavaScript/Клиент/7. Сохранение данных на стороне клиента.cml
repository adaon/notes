!1 Сохранение данных на стороне клиента

Способы хранения данных на стороне клиента:

{!
Web Storage -- Первоначально был частью стандарта HTML5, но затем был выделен в отдельную спецификацию. Частично реализован во всех текущих браузерах, включая IE8. Подходит для хранения больших (но не огромных) объемов данных. Содержит объекты !!localStorage и !!sessionStorage.

Cookies -- Старейший механизм хранения данных на стороне клиента. Данный механизм сложен в использовании и подходит лишь для хранения небольших объемов текстовых данных. Любые данные, хранящиеся в cookies, всегда передаются серверу с каждым запросом.

IE User Data -- Механизм userData, реализованный в IE5, позволяет хранить достаточно большие объемы строковых данных и может использоваться как альтернатива механизму Web Storage.

Offline Web Applications -- Стандарт HTML5 определяет прикладной программный интерфейс Offline Web Applications, позволяющий кэшировать веб-страницы и связанные с ними ресурсы (сценарии, CSS-файлы, изображения и т.д). Это хранилище предназначено для сохранения веб-приложений целиком, а не только их данных, и позволяет веб-приложениям устанавливать себя, давая возможность использовать их даже при отсутствии соединения с интернетом.

Прикладной интерфейс к файловой системе -- Современные браузеры поддерживают объект File, позволяющий выгружать файлы, выбранные пользователем. Проекты родственных стандартов определяют прикладной интерфейс для организации частной, локальной файловой системы и выполнения операции чтения и записи в файлы, находящиеся в этой файловой системе.
!}

!2 Объекты localStorage и sessionStorage

Оба свойства ссылаются на объект Storage - постоянно хранимый ассоциативный массив, отображающий строковые ключи в строковые значения.

{-
localStorage['username'] = 'Denis';
-}

Проект спецификации позволяет хранить в данных объектах структурированные данные (объекты и массивы), а также простые значения и данные встроенных типов. Однако в настоящий момент браузеры позволяют хранить только строки.

!3 Срок хранения и область видимости

Объект localStorage представляет долговременное хранилище данных: срок хранения не ограничен, и данные сохраняются на компьютере пользователя, пока не будут удалены веб-приложением или пока пользователь не потребует от браузера (посредством некоторого пользовательского интерфейса, предоставляемого браузером) удалить их. Доступность данных в объекте localStorage ограничивается происхождением документа.

Данные, сохраняемые в sessionStorage, имеют другой срок хранения: они хранятся, пока остается открытым окно верхнего уровня или вкладка браузера, в которой выполняется сценарий. Доступность данных также ограничивается происхождением. Однако, помимо этого доступность данных ограничивается также окном. Если пользователь откроет в браузере две вкладки, отображающие документы с общим происхождением, эти две вкладки будут владеть разными хранилищами sessionStorage.

!3 Прикладной программный интерфейс объекта Storage

{-
storage.setItem(name, value);
storage.getItem(name);
storage.removeItem(name);
localStorage.clear(); // Удаление всех значений.
localStorage.key(n); // Имя n-ого значения.
-}

!3 События объекта Storage

При изменении данных, хранящихся в localStorage или sessionStorage, браузер генерирует событие !!storage во всех объектах Window, в которых доступны эти данные (но не в окне, где выполнялось сохранение). Если в браузере открыты две вкладки со страницами с общим происхождением и в одной из страниц проиводится сохранение значения в localStorage, в другой вкладке будет сгенерировано событие storage. Данное событие генерируется, только если содержимое хранилища действительно изменяется. Присваивание хранимому элементу его текущего значения, как и попытка удалить несуществующий элемент, не возбуждают событие.

Объект события:

{!
event.key -- Имя или ключ сохраняемого или удаляемого элемента. Если был вызван метод clear(), это свойство будет иметь значение null.
event.newValue -- Новое значение элемента или null, если был вызван метод removeItem().
event.oldValue -- Старое значение существующего элемента, изменившегося или удаленного, или значение null, если был создан новый элемент.
event.storageArea -- Это свойство будет хранить значение свойства localStorage ил sessionStorage целевого объекта Window.
event.url -- URL-адрес (в виде строки) документа, сценарий которого выполнил операцию с хранилищем.
!}

!2 Cookies

{-
navigatoe.cookieEnabled; // Включена ли поддержка cookie. Нестандартное свойство.
-}

!3 Атрибуты cookie: срок хранения и область видимости

{!
max-age -- По умолчанию cookies являются временными - их значения сохраняются на период сеанса браузера. Если указать в значении атрибута !!max-!!age срок хранения в секундах, браузер сохранит cookie в локальном файле и удалит его только по истечении срока хранения.
path -- Видимость cookie ограничивается происхождением документа, а также строкой пути к документу. Область видимости может регулироваться посредством атрибутов !!path и !!domain. По умолчанию cookie связывается с создавшей его страницей и доступен этой странице, а также другим страницам из того же каталога или любых его подкаталогов. Если атрибут path установлен в "/", этот cookie будет виден для всех страниц того же домена.
domain -- Если cookie, созданный страницей с сервера catalog.example.com, имеет в атрибуте path значение "/", а в атрибуте domain - значение ".example.com", этот cookie будет доступен всем веб-страницам в любых поддоменах в домене "example.com".
secure -- Определяет, как значения cookie передаются по сети. По умолчанию cookies не защищены, т.е. передаются по обычному незащищенному HTTP-соединению. Однако если cookie помечен как защищенный, он передается, только когда обмен между браузером и сервером организован по протоколу HTTPS или другому защищенному протоколу.
!}

!3 Сохранение cookie

{-
document.cookie = 'name=' + encodeURIComponent('Denis Ivanov'); // Сохранение cookie. Записанный таким способом cookie сохраняется в течение сеанса работы браузера, но теряется при его закрытии пользователем.

document.cookie = 'name=value; max-age=seconds'; // Указание кол-ва секунд. Точно так же устанавливаются другие параметры.

document.cookie = 'name=value; path=path; domain=domain; max-age=0'; // Удаление cookie.
-}

Прис следующем чтении свойства cookie сохраненная пара имя/значение будет включена в список cookie документа. Значения не могут содержать точки с запятой, запятые или пробельные символа.

!3 Чтение cookies

{-
document.cookie; // Возвращает список пар имя=значение, разделенных точкой с запятой и пробелом.
-}

!3 Ограничения cookies

Как правило, браузеры ограничивают размер одного cookie 4 Кбайтами.

!2 Механизм сохранения userData в IE

{!Пропущено:648-650!}

!2 Хранилище приложений и автономные веб-приложения

{!Пропущено:650-661!}