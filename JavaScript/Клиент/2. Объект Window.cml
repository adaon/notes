!1 Объект Window

!2 Таймеры

{-
var timeoutId = setTimeout(func, 1000);
clearTimeout(timeoutId);

var intervalId = setInterval(func, 1000);
clearInterval(intervalId);
-}

В первом аргументе таймерам допускается передавать строку, в этом случае строка будет интепретироваться (как с применением функции eval()) через указанный интервал времени.

Спецификация HTML5 (и все браузеры !!кроме !!IE) допускает передавать дополнительные аргументы после первых двух. Все эти аргументы будут переданы функции, вызов которой планируется этими методами.

Если методу setTimeout() указать величину интервала 0 миллисекунд, указанная функция будет вызвана не сразу, а "как только такая возможность появится", т.е. как только завершат работу все обработчики событий.

!2 Адрес документа и навигация по нему

Свойство location объекта Window ссылается на объект Location, представляющий текущий адрес URL-документа, отображаемого в окне и определяющий методы, инициирующие загрузку нового документа в окно.

Свойство location объекта Document также ссылается на объект Location:

{-
window.location === document.location; // Всегда верно.
-}

{-
document.URL; // Хранит статическую строку с адресом документа (в отличии от location не меняется при перемещении по документу).
-}

!3 Анализ URL

{-
location.href; // Строка, содержащая полный текст URL-адреса.

// Свойства декомпозиции:
location.protocol;
location.hostname;
location.port;
location.pathname;
location.search;
location.hash;
-}

!3 Загрузка нового документа

{-
location.assign(url); // Загрузить и отобразить документ по указанному URL-адресу.
location.replace(url); // Загрузить и отобразить документ, удалив текущий из истории.
location.reload(); // Перезагрузить текущий документ.

// Более традиционный способ перехода на другой адрес:
location = 'http//google.ru';
location = '}about}';
location = '#top'; // Перейти в начало документа.
-}

Свойства декомпозиции также доступны для записи, и их изменение влечет за собой изменение текущего URL и загрузку страницы.

!2 История посещений

Свойство history объекта Window ссылается на объект History данного окна.

{-
history.length; // Количество сохраненных адресов в истории.

history.back(); // Перейти назад.
history.forward(); // Перейти вперед.
history.go(n); // Принимает целочисленный аргумент и пропускает заданное число страниц, двигаясь вперед (если аргумент положительный) или назад (если аргумент отрицательный) в списке истории.
-}

Если окно содержит дочерние окна (такие как <iframe>), истории посещений в дочерних окнах хронологически чередуются с историей посещений в главном окне. То есть, вызов history.back() в главном окне может вызвать переход назад, к ранее отображавшемуся документу, в одном из дочерних окон, оставив главное окно в текущем состоянии.

!2 Информация о браузере и об экране

!3 Объект Navigator

Свойство window.navigator содержит общую информацию о номере версии и производителе браузера. Данное свойство названо в честь Netscape Navigator. IE также поддерживает синоним этого свойства - clientInformation.

{-
navigator.appName; // Название веб-браузера. В IE это строка "Microsoft Internet Explorer". В Firefox - "Netscape".
navigator.appVersion; // Обычно значение этого свойства начинается с номера версии, за которым следует другая информация о версии браузера и его производителе. Обычно в начале идет 4.0 или 5.0, что свидетельствует о совместимости с четвертым или пятым поколениями браузеров.
navigator.userAgent; // Строка, которую браузер посылает в заголовке User-Agent. Обычно содержит ту же информацию, что и appVersion, но может содержать дополнительную информацию.
navigator.platform; // Строка, идентифицирующая операционную систему (и, возможно, аппаратную платформу), в которой работает браузер.
-}

В дополнение к этим свойствам объект Navigator имеет еще несколько свойств и методов. В число стандартных и часто реализуемых нестандартный свойств входят:

{-
navigator.onLine; // Данное свойство, если существует, определяет, подключен ли браузер к сети.
navigator.geolocation; // Объект Geolocation, определяющий API для выяснения географического положения пользователя.
navigator.javaEnabled(); // Нестандартный метод, который должен возвращать true, если браузер способен выполнять Java-апплеты.
navigator.cookiesEnabled(); // Нестандартный метод, который должен возвращать true, если браузер способен сохранять cookies. Если браузер настроен на сохранение cookies только для определенных сайтов, этот метод может возвращать некорректное значение.
-}

!3 Объект Screen

Свойство screen объекта Window ссылается на объект Screen, представляющий информацию о размере экрана на стороне пользователя и доступном количестве цветов.

{-
// Размер экрана в пикселах:
screen.width;
screen.height;

// Доступный размер экрана (исключаются такие элементы как панель задач и т.д.):
screen.availWidth;
screen.availHeight;

screen.colorDepth; // Количество битов на пиксел, определяющих цвет.
-}

Свойство window.screen является нестандартным, но оно реализовано практически во всех браузерах.

!2 Диалоги

{-
alert(message); // Выводит сообщение и ожидает, пока пользователь закроет диалоговое окно.
confirm(message); // Предлагает пользователю щелкнуть на кнопке OK или Отмена и возвращает логическое значение.
prompt(message); // Выводит сообщение, ждет ввода строки пользователем и возвращает эту строку.
-}

В дополнение к этим методам в объекте Window имеется более сложный метод, showModalDialog(), отображающий модальный диалок, содержащий разметку HTML, и позволяющий передавать аргументы и получать возвращаемое значение.

{-
showModalDialog(url, arg, options);
-}

Во втором аргументе передается произвольное значение, которое будет доступно в диалоговом окне как window.dialogArguments. Третий аргумент - строка-список пар имя=значение, разделенных запятыми. Для определения размеров окна диалога можно использовать параметры "dialogwidth" и "dialogheight", а чтобы позволить пользователю изменять размеры окна, можно определить параметр "resizable=yes".

После закрытия окна значение свойства window.returnValue становится возвращаемым значением метода.

!2 Обработка ошибок

Свойство onerror объекта Window - это обработчик событий, который вызывается во всех случаях, когда необработанное исключение достигло вершины стека вызовов и когда браузер готов отобразить сообщение об ошибке в консоли JavaScript.

Данному обработчику передается три аргумента вместо объекта события: сообщение, описывающее ошибку, строка с адресом документа с JavaScript-кодом, вызвавшим ошибку, и номер строки с документе, где произошла ошибка.

Если обработчик возвращает true, это говорит браузеру о том, что ошибка обработана и никаких дальнейших действий не требуется.

!2 Элементы документа как свойства окна

Если для именования элемента в HTML-документе используется атрибут id и если объект Window еще не имеет свойства, имя которого совпадает со значением этого атрибута, объект Window получает неперечислимое свойство с именем, соответствующим значению атрибута if, значением которого становится объект HTMLElement, представляющий этот элемент документа.

Свойства, представляющие фреймы, при этом ссылаются на объекты Window, а не на элементы фреймов.

!2 Работа с несколькими окнами и фреймами

!3 Открытие окон

Открыть новое окно или вкладку можно с помощью метода !!open() объекта Window.

Он принимает 4 необязательных аргумента:

};
* Адрес документа, отображаемого в новом окне. Если этот аргумент отсутствует (либо является пустой строкой), будет открыт специальный URL пустой страницы about:blank.
* Строка с именем окна. Если окно с указанным именем уже существует (и сценарию разрешено просматривать содержимое этого окна), используется это существующее окно. Иначе создается новое окно и ему присваивается указанное имя. Если данный аргумент отсутствует, будет использовано специальное имя "_blank", т.е. будет открыто новое неименованное окно.
* Список параметров имя=значение, разделенных запятыми. Данный аргумент является нестандартным, и спецификация требует, чтобы браузеры игнорировали его. При указании данного аргумента любые не указанные явно элементы отсутствуют.
* Логическое значение, определяющее, должен ли URL-адрес, указанный в первом аргументе заменить текущую запись в истории просмотра окна (true) или требуется создать новую запись (false). Если аргумент опущен, используется значение по умолчанию false.
;}

Метод open() возвращает объект Window, представляющий вновь созданное окно.

{!В окнах, созданных методом window.open(), свойство opener ссылается на объект Window сценария, открывшего его. В других случая свойство opener получает значение null.!}

!3 Закрытие окон

Если объект Window был создан сценарием, то этот же сценарий сможет закрыть его следующей инструкцией:

{-
w.close();
-}

Объект Window имеет свойство closed, которое определяет закрыто ли окно.

!3 Отношения между фреймами

{-
parent.history.back(); // Сценарий может ссылаться на родительское окно с помощью свойства parent.
-}

Объект Window, представляющий окно верхнего уровня или вкладку, не имеет вмещающего окна, поэтому его свойство parent просто ссылается на само окно.

Независимо от глубины вложенности фрейма его свойство !!top ссылается на содержащее кго окно самого верхнего уровня. Если объект Window представляет окно верхнего уровня, свойство top просто ссылается на само окно. Для фреймов, непосредственно принадлежащих окну верхнего уровня, значение свойства top совпадает со значением свойства parent.

Получение объекта окна дочернего фрейма:

{-
var childFrame = document.getElementById('f1').contentWindow;
-}

Свойство окна фрейма !!frameElement содержит ссылку на HTML-элемент фрейма.

Свойство !!window.!!frames ссылается на объект, подобный массиву, который может индексироваться числовыми индексами или именами фреймов. Элементами данного массива являются объекты Window, представляющие фреймы. Если в элементе <iframe> указать атрибут name или id, в качестве индекса этого фрейма можно будет использовать не только число, но и имя.

!3 JavaScript во взаимодействующих окнах

Каждое окно имеет собственные копии конктрукторов предопределенных объектов. Это значит, что оператор instanceof не будет работать с объектами в разных окнах.