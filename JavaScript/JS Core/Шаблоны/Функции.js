// Самоопределяемые функции ===================================================

// Функция может переопределять саму себя (самоопределяемые функции)
function my() {
    alert('1');
    my = function() {
        alert('2');
    };
}
my(); // 1
my(); // 2

// Немедленно вызываемые функции  =============================================

// Использование глобального объекта
(function(global) {
    //...
})(this);

// Немедленно вызываемая функция может возвращать значение
var result = (function() {
    return 5 + 5;
})();

// Немедленная инициализация объектов =========================================

({
    init: function() {
        // Инициализация
    }
}).init();

// Свойства функций - шаблон мемоизации =======================================

// Мемоизация - запоминание возвращаемых результатов с целью оптимизации
function func(param) {
    func.cache[param] = result;
    // func.cache[Array.prototype.slice.call(arguments)] = result; - Для нескольких аргументов
    return func.cache[param];
}
func.cache = {};

// Объекты с параметрами ======================================================

func({
    param1: 'value1',
    param2: 'value2'
});

// Каррирование ===============================================================

// Это изменение функции, чтобы она могла принимать частичное количество аргументов
function add(x, y) {
    var oldx = x, oldy = y;
    if(type oldy == undefined) { // Частичное применение
        return function(newy) {
            return oldx + newy;
        }
    }
    // Полное применение
    return x + y;
}