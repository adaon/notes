// Определение функций ========================================================

// Определение функции путем передачи списка аргументов и тела функции
var func = new Function("x", "return x*x;");

// Вложенные функции
function func1() {
    function func2() { }
}

// Функциональный литерал
function() { }

// ВНИМАНИЕ!
// Function Declaration (Объявление функции) Данное объявление создает функцию ВО ВРЕМЯ ВХОДА В ОБЛАСТЬ ВИДИМОСТИ, затем при выполнении такие объявления игнорируются
// Поэтому УСЛОВНО объявить функцию через объявление НЕЛЬЗЯ
function func() {}
// Function Expression (Функциональное выражение) Данное выражение создает функцию ВО ВРЕМСЯ ВЫПОЛНЕНИЯ данного кода
var func = function() {}

// Одновременное создание и вызов функции
(function() {})()

// Аргументы ==================================================================

// Недостающие аргументы имеют значение undefined
function func(a) {
    // Значение аргумента по умолчанию
    if(!a) a = 0;
    // или
    a = a || 0;   
}

// arguments
function func() {
    arguments.length; // В теле функции в данном объекте Arguments (подобном массиву) содержатся все аргументы, переданные функции независимо от объявленных в заголовке
    arguments.callee; // Данный объект содержит исполняемую функцию
}

// Свойства объектов функций ==================================================

func.length // Количество аргументов, которые функция ожидает получить
func.prototype // Ссылка на объект-прототип
func.name // Название функции

// Методы объектов функций ====================================================

func.call(obj, a, b); // Вызвать функцию func как метод объекта obj с аргументами 1 и b
func.apply(obj, arr); // Вызвать функцию func как метод объекта obj с аргументами из массива arr. Если в первом аргументе передать null, функция вызывается от имени глобального объекта

// Область видимости и замыкания ==============================================

// Функции имеют ЛЕКСИЧЕСКУЮ область видимости, то есть исполняются в области видимости, которая была создана на момент ОПРЕДЕЛЕНИЯ функции, а не на момент исполнения

// Именованные функциональные выражения =======================================

// Имя функции доступно только внутри самой функции и служит для возможности функции вызвать саму себя
// В браузерах IE до 9 версии данное имя видно везде
var func = function myFunc() {
    alert(myFunc);
}