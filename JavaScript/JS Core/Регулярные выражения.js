// Определение регулярных выражений ===========================================

var pattern = /pattern/; // Литерал регулярного выражения. Создает новый объект RegExp и присваивает его переменной pattern
var pattern = new RegExp('pattern', [флаги]); // Создание регулярного выражения с помощью конструктора

// Символы ====================================================================

// Символы литералов
\0      // Символ NUL
\t      // Табуляция
\n      // Перевод строки
\v      // Вертикальная табуляция
\f      // Перевод страницы
\r      // Возврат каретки
\xnn    
\uxxxx  
\cX     

// Чтобы включить какой-то специальный символ в регулярное выражение буквально, необходимо экранировать его обратным слэшем

// Классы символов
[abc] // Любой из символов a b c
[^abc] // Любой символ, кроме a b c
[a-zA-Z0-9] // Любой символ от a до z и цифры
. // Любой символ, кроме перевода строки или другого разделителя
\w // Любой текстовый ASCII-символ [a-zA-Z0-9_]
\W // Любой символ, не являющийся текстовым символом
\s // Любой символ-разделитель
\S // Любой символ, не являющийся символом-разделителем
\d // Любые цифры
\D // Любой символ, отличный от цифр
[\b] // Литерал символа "забой"

// Повторение
{n,m} // От n до m  раз
{n,} // n и более раз
{n} // n раз
? // 0 или 1 раз
+ // 1 и более раз
* // 0 и более раз
/*символ повторения*/? // Нежадное повторение (выбирает наименьшее количество)

| // ИЛИ
() // Группировка выражения

// Флаги ======================================================================

/reg/g // Глобальный поиск и замена
/reg/i // Без учета регистра
/reg/m // Многострочный поиск

// Методы класса String =======================================================

// Поиск по строке. Возвращает позицию первого найденного соответствия или -1, если соответствие не найдено. Если аргумент не является регулярным выражением, он сначала передается конструктору RegExp
str.search(reg);
// Поиск с заменой. Если регулярное выражение содержит флаг g (/reg/g), заменяются все вхождения. Иначе заменяется только первое вхождение. Если вместо регулярного выражения передается строка, выполняется буквальный поиск с заменой, без преобразования в регулярное выражение
str.replace(reg, str_to_replace);
// Выполняет поиск по строке и возвращает массив найденных соответствий (с флагом g выполняется поиск по всей строке, иначе возвращается массив с полной строкой и группами подсовпадений)
var result = text.match(/reg/);
result.index; // Содержит номер позиции символа найденной подстроки
result.input; // Исходная строка поиска
// Разделяет строку по регулярному выражению
str.split(/reg/);

// Объект RegExp ==============================================================
var reg = RegExp('reg', 'flags');

var results = reg.exec('string'); // Находит совпадения и возвращает их массив