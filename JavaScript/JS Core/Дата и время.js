// Создание объекта ===========================================================

new Date(); // Текущие дата и время
new Date(153135); // Кол-во миллисекунд, прошедших с 1 января 1970 года GMT
new Date(string); // Если аргумент — строка, используется вызов Date.parse для ее разбора
new Date(year, month [, date, hours, minutes, seconds, ms]); // Отсчет месяца начинается с нуля

// Получение компонентов даты =================================================

// Местное время
date.getFullYear(); // Получить год
date.getMonth(); // Получить месяц от 0 до 11
date.getDate(); // Получить число месяца, от 1 до 31
date.getHours();
date.getMinutes();
date.getSeconds();
date.getMilliseconds();
date.getDay(); // Получить день недели (0 - воскресенье, 6 - суббота)

// Время по UTC
date.getUTCFullYear(); // Получить год
date.getUTCMonth(); // Получить месяц от 0 до 11
date.getUTCDate(); // Получить число месяца, от 1 до 31
date.getUTCHours();
date.getUTCMinutes();
date.getUTCSeconds();
date.getUTCMilliseconds();
date.getUTCDay(); // Получить день недели (0 - воскресенье, 6 - суббота)

date.getTime(); // Число миллисекунд, прошедших с 01.01.1970 00:00:00 UTC
date.getTimezoneOffset(); // Разница между местным и UTC временем, в минутах

// Установка компонентов даты =================================================

setFullYear(year [, month, date])
setMonth(month [, date])
setDate(date)
setHours(hour [, min, sec, ms])
setMinutes(min [, sec, ms])
setSeconds(sec [, ms])
setMilliseconds(ms)
setTime(milliseconds) // Устанавливает всю дату

// Автоисправление даты =======================================================

// Если установить значение компонента выше или ниже возможного, неправильные компоненты даты автоматически распределятся по остальным
var late = new Date();
late.setDate(now.getDate() + 100); // + 3 месяца

// Преобразование к числу, разность дат =======================================

// При использовании в числовом контексте даты автоматически преобразовываются в число миллисекунд
// ВАЖНЫЙ ПОБОЧНЫЙ ЭФФЕКТ: даты можно вычитать, результат вычитания объектов Date — их временная разница, в миллисекундах. Это используют для измерения времени и профилирования

// Форматирование =============================================================

// Возвращает стандартное строчное представление
date.toString();
date.toDateString();
date.toTimeString();
// Возвращает локальное строчное представление
date.toLocaleString();
date.toLocaleDateString();
date.toLocaleTimeString();
// То же самое, что toString(), но дата в зоне UTC
date.toUTCString();
// Возвращает дату в формате ISO Детали формата будут далее. Поддерживается современными браузерами, не поддерживается IE<9
date.toISOString();

// Разбор строки, Date.parse ==================================================

YYYY-MM-DDTHH:mm:ss.sssZ // Часть ‘Z’ обозначает (необязательную) временную зону
// Также возможны упрощенные варианты:
YYYY 
YYYY-MM 
YYYY-MM-DD
THH:mm   // например: 'T12:00'
THH:mm:ss 
THH:mm:ss.sss

var date = Date.parse(str);