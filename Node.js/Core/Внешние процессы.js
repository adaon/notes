var child_process = require('child_process');

/* Выполнение внешних команд */

var options = {
	cwd: 'C:', // Текущая рабочая директория.
	encoding: 'ascii', // Ожидаемая кодировка дочернего вывода. По умолчанию utf8. ascii, utf8, ucs2, base64.
	timeout: 1000, // Таймаут в миллисекундах для выполнения команды. По умолчанию 0 — не установленное время выполнения.
	maxBuffer: 1024, // Устанавливает максимальный размер разрешенного объекма вывода stdout или stderr в байтах. Если данный размер превышается, дочерний поток останавливается. По умолчанию 200 * 1024.
	killSignal: 'SIGKILL', // Сигнал, посылаемый дочернему процессу при истечении таймера. По умолччанию SIGTERM, который посылает терминационный сигнал процессу.
	env: null, // Переменные среды, устанавливаемые для дочернего процесса. По умолчанию null (наследует переменные среды, которые определены перед порождением).
};

child_process.exec('ls',[, options] function(err, stdout, stderr) {
	// Если возникнет ошибка, первый аргумент будет объектом Error/
	// Если первый аргумент не содержит ошибку, второй аргумент будет содержать вывод команды.
	// Третий аргумент будет содержать вывод ошибок команды.
	console.log(stdout);
});


/* Порождение дочерних процессов */

var child = child_process.spawn('tail', ['-f', '/var/log/system.log']); // Создание дочернего процесса (принимает имя процесса и массив аргументов). Возвращает объект ChildProcess.

// Прослушивание стандартного вывода дочернего процесса.
child.stdout.addListener('data', function(data) {
	console.log(data.toString());
});

// Прослушивание стандартного потока ошибок дочернего процесса.
child.stderr.on('data', function(data) {
	console.log(data.toString(););
});

// Запись в стандартный поток входа дочернего процесса.
child.stdin.resume(); // Возобновление потока (по умолчанию отключен).

// Прослушивание события выхода дочернего потока
// Обработчик принимает код завершения (при терминации - null) и сигнал терминации.
child.on('exit', function(code, signal) {
	console.log('Child process exited with code ' + code);
});

// Получение ввода из стандартного потока (в виде буфера).
process.stdin.addListener('data', function(data) {
	console.log(data.toString());
});

process.stdout.write('Hello, world!');

/* Сигнализирование и терминация процессов */

// Принудительная терминация процесса.
child.kill(/*'SIGUSR2'*/);

// Прослушивание сигналов. При этом процесс не завершается.
process.on('SIGUSR2', function() {
	console.log('Got a SIGUSR2 signal.');
});