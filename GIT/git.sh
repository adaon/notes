git init # Инициализация репозитория

git add files # Добавление файлов в репозиторий
git add . # Добавление всех файлов в репозиторий

git commit -m 'Message' # Отправка текущих файлов в репозиторий (с сообщением)
git commit -a -m 'Message' # Отправка всех файлов

git reset --hard # Восстановление репозитория в исходное состояние
git reset --hard HASH # Восстановление состояния до указанного коммита и удаление всех последующих коммитов безвозвратно

git rm old_files # Исключение файлов из репозитория
git mv old_file new_file # Переименование (перемещение) файла

git log # Показывает список последних коммитов и их хэши

git checkout HASH # Временно возвращает репозиторий в состояние указанного коммита
git checkout master # Возвращает в последнюю (рабочую) версию репозитория
git checkout HASH file1, file2 # Восстановление только некоторых файлов и директорий
git checkout :/"Mess" # Переход на коммит, сообщение которого начинается с указанной строки
git checkout master~5 # Переход на 5-ое с конца сохраненное состояние

git revert HASH # Отменяет коммит с выбранным хешем (изменение записывается в качестве нового коммита)

git clone git://server/path # Клонирование репозитория

git pull # Обновить локальный репозиторий до последней версии

# На выходе будет патч, который можно применить с помощью git apply
git diff # Показывает изменения, сделанные со времени последнего коммита
git diff @{yesterday} # Изменения со вчерашнего дня
git diff HASH "master~2" # Между определенной версией и версией, сделанной 2 коммита назад

git apply # Применить патч

git whatchanged --since="2 weeks ago" # Что изменилось за 2 недели


### Branches ###

git checkout -b new_branch # Создание новой ветки и переключние на нее
git checkout new_branch # Переключение на новую ветку

git merge part2 # Слияние текущей ветки с part2

get branch -d part2 # Удаление ветки
git branch # Просмотр списка всех веток
git branch -m b1 b2 # Переименование ветки

git stash # Сохраняет текущее состояние во временном месте (копилке) и восстанавливает предыдущее состояние
git stash apply # Применяет текущие изменения и возвращает рабочее состояние


### Изменение истории ###

git commit --amend # Изменение сообщения последнего коммита